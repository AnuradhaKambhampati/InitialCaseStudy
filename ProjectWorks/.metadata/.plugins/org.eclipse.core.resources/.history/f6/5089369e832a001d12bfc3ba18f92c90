package com.digitalbooks.controller;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.digitalbooks.entity.Author;
import com.digitalbooks.entity.Book;
import com.digitalbooks.entity.Reader;
import com.digitalbooks.model.InputRequest;
import com.digitalbooks.repository.AuthorRepository;
import com.digitalbooks.service.DigitalBooksService;
import com.digitalbooks.utils.Constants;


@RestController
@RequestMapping("/digitalbooks")
public class DigitalBooksController {
	
	@Autowired
	DigitalBooksService bookService;
	@Autowired
	AuthorRepository authorRepo;
	
	@GetMapping("/books/search")
	public List<Book> searchBooks(@RequestParam("category") String category, @RequestParam("author") String authorName,
			@RequestParam("price") float price, @RequestParam("publisher") String publisher){
		List<Book> booksList=new ArrayList<>();
		booksList= bookService.searchBooks(category,authorName,price,publisher);
		return booksList;
	}
	
	@PostMapping("/books/buy")
	public int buyBook(@RequestBody InputRequest request) {
		int bookId=request.getBookId();
		Reader reader=request.getReader();
		int paymentId=bookService.buyBook(bookId, reader);
		return paymentId;
	}
	
	@RequestMapping(path="/author/signup",method = RequestMethod.POST,consumes = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<Object> createAccount(@RequestBody Author author) {
		Author registeredAuthor=null;
		ResponseEntity<Author> response=null;
		String status=Constants.USER_DOES_NOT_EXIST;
		List<Author> authorsList=authorRepo.findAll();
		if(authorsList.contains(author)) {
			status=Constants.USER_EXISTS;
			return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
		}else {
			registeredAuthor=bookService.createAccount(author,status);
			response=new ResponseEntity<Author>(registeredAuthor,HttpStatus.CREATED);
		}
		return response;
	}
	
	@PostMapping("/author/login")
	public ResponseEntity<Author> login(@RequestBody Author author) {
		//Authentication
		ResponseEntity<Author> response=null;
		String status=bookService.login(author);
		if(status.equals(Constants.USER_EXISTS)) {
			response=new ResponseEntity<Author>(author, HttpStatus.OK);
		}else {
			response=new ResponseEntity<Author>(HttpStatus.NOT_FOUND);
		}
		return response;
	}

	@PostMapping("/author/{authorId}/")
	public ResponseEntity<Book> createBook(@RequestBody Book book,@PathVariable int authorId) {
		Book createdBook=bookService.createBook(book,authorId);
		return new ResponseEntity<Book>(createdBook,HttpStatus.CREATED);
	}
}


